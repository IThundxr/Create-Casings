buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forgegradle_version}", changing: false
        classpath "org.parchmentmc:librarian:${librarian_version}"
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'


version = "${mod_version}-${minecraft_version}"
group = 'dev.ithundxr.mods.createcasings'
archivesBaseName = 'createcasings'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'createcasings'

            mods {
                createcasings {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'createcasings'

            mods {
                createcasings {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'createcasings'

            mods {
                createcasings {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'createcasings', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                createcasings {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
    maven {
        name 'Progwm16 maven'
        url 'https://dvs1.progwml6.com/files/maven'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Mixins
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    // Create Mod
    implementation fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    // Just Enough Items
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
}

// process mods.toml to inject variables
def modsTomlSpec = copySpec{
    from(sourceSets.main.resources) {
        include 'META-INF/mods.toml'
        expand  'version': mod_version,
                'loader_range': loader_range,
                'minecraft_range': minecraft_range,
                'forge_range': forge_range,
                'create_range': create_range,
                'github_project': github_project
    }
}

// need to copy into each build directory, unfortunately does not seem easy to do this automatically
def buildPaths = [
        "$rootDir/out/production/resources", // IDEA
        "$rootDir/bin", // Eclipse
]

// task to add mods.toml to all relevant folders
task replaceResources {
    // ensure directory exists, first build likes to fail
    new File("${processResources.destinationDir}/META-INF").mkdirs()
    // copy for gradle
    copy {
        outputs.upToDateWhen { false }
        with modsTomlSpec
        into processResources.destinationDir
    }
    // copy for IDEs
    buildPaths.each { path ->
        if (new File(path).exists()) {
            copy {
                outputs.upToDateWhen { false }
                with modsTomlSpec
                into path
            }
        }
    }
}

processResources {
    exclude 'META-INF/mods.toml'
    finalizedBy replaceResources
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "createcasings",
                "Specification-Vendor"    : "createcasingssareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "createcasingssareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "createcasings.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}


mixin {
    add sourceSets.main, "createcasings.refmap.json"

    config "createcasings.mixins.json"
}
